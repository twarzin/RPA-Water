rows = NULL,
cols = NULL,
check.names = FALSE,
sep.names = ".",
namedRegion = NULL,
na.strings = "NA",
fillMergedCells = FALSE
)
colnames(pet.data)[colnames(pet.data) == "FIPS"] <- "fips"
delta.cc <- merge(precip.data, pet.data, by=c('fips'))
View(pet.data)
View(precip.data)
colnames(pet.data)[colnames(pet.data) == "fips_n"] <- "fips"
delta.cc <- merge(precip.data, pet.data, by=c('fips'))
demand <- merge(demand.noCC, delta.cc, by=c('fips', 'year'))
View(demand)
View(pet.data)
View(delta.cc)
colnames(delta.cc)[colnames(delta.cc) == "year.x"] <- "year"
demand <- merge(demand.noCC, delta.cc, by=c('fips', 'year'))
View(demand)
View(demand)
rm(list = ls())  # clears memory
# Set working directory to file location
# for Leslie:
setwd("/Users/leslie/Dropbox/RPA-Water")
library(tidyr)
library(tibble)
library(ggplot2)
library(reshape2)
library(dplyr)  # Has the pipe operator %>%.
library(data.table)
library(openxlsx)
# Notes for faster functions
'
1) "data.table::fread" is faster than "read.csv" but I use "%>% as.data.frame" at the end
fread doesnot change the column names even if they are not allowed,
so I will limit its use here not to distribe the original code
2) "data.table::fwrite" is faster than "write.csv" and by default donot include the row names
3) "dplyr::inner_join" is quivalent but faster than "merge" , other options are full_join and left_join
4) "dplyr::arrange" is faster than attaching and using the order function
5) I replaced the for loop with a different login that run in 3 min now instsead of 2 hr
'
pop.inc <- data.table::fread("1_BaseData/popinc_proj.csv") %>% as.data.frame()
# projections of irrigated acreage for ag
acre.data <- data.table::fread('1_BaseData/acredata-use.csv', header=TRUE) %>% as.data.frame()
# acre.data does not vary by SSP, so collapse to shorten merges
acre.data <- subset(acre.data, ssp == "ssp1")
acre.data <- acre.data %>%
select(fips, year, acres)
# combine projection data
proj.data <- dplyr::inner_join(pop.inc, acre.data, by=c("fips", "year"))
## This is population, income, and acreage projected through 2070:
proj.data <- proj.data %>%
select(fips, year, pop, ssp, inc, acres)
## This is baseline (i.e., 2015) water demand, by sector:
wd.2015 <- read.csv("1_BaseData/USGS2015.csv")
wd.2015 <- wd.2015 %>%
select(FIPS,
'DO.WDelv',
'IN.WFrTo',
'IR.WFrTo',
'IR.CUsFr',
'IR.IrTot',
'LI.WFrTo',
'AQ.WFrTo',
'MI.WFrTo',
'PT.WFrTo',
'PT.PSDel',
'PT.CUsFr',
'PT.Power')
# Create baseline withdrawals for surface water fresh for each sector
# - first calculate total withdrawals for public supply, then calculate percent
#   of those withdrawals from surface water. Some values read in as character
#   so need to convert to numeric
wd.2015[] <- lapply(wd.2015, as.numeric)
#   convert NAs to zeros
wd.2015[is.na(wd.2015)] <- 0
# Creating variables for total sector withdrawals + deliveries (Mgal/day)
wd.2015$dom   <- wd.2015$DO.WDelv
wd.2015$ind   <- wd.2015$IN.WFrTo + wd.2015$MI.WFrTo
wd.2015$ag    <- wd.2015$IR.WFrTo
wd.2015$therm <- wd.2015$PT.WFrTo + wd.2015$PT.PSDel
wd.2015$la    <- wd.2015$LI.WFrTo + wd.2015$AQ.WFrTo
wd.2015$total <- wd.2015$dom + wd.2015$ind + wd.2015$therm +
wd.2015$ag + wd.2015$la
all.wd.2015 <- sum(wd.2015$total)
print(paste0('2015 total withdrawal is ',all.wd.2015,' MGD'))
# baseline demand driver data from USGS
wd.2015$acres <- wd.2015$IR.IrTot
wd.2015$power <- wd.2015$PT.Power
# rename fips to lowercase to match other data files
wd.2015 <- rename(wd.2015, fips = FIPS)
growth <- read.csv("1_BaseData/WDGrowthCU.csv")
pop.inc.2015 <- subset(pop.inc, year == 2015)
# join population projections with base year withdrawals data
demand.init1 <- merge(pop.inc.2015, wd.2015, by = "fips")
# select variables needed for calculations:
# Note, Pop is from withdrawal data. pop used here is from population projections
keeps <- c("fips","year","ssp","inc","pop","dom","ag","ind","therm","la",
"acres", "power")
demand.init <- demand.init1[,names(demand.init1) %in% keeps]
demand.init$wpu.dom   <- demand.init$dom / demand.init$pop
demand.init$wpu.ind   <- demand.init$ind / demand.init$inc
demand.init$wpu.ag    <- demand.init$ag / demand.init$acres
demand.init$wpu.therm <- demand.init$therm / demand.init$power
# create dataframe for projections
demand.proj <- subset(proj.data, year != 2015)
demand.proj$dom <- NA
demand.proj$ind <- NA
demand.proj$therm <- NA
demand.proj$ag <- NA
demand.proj$la <- NA
demand.proj$power <- NA
demand.proj$wpu.dom <- NA
demand.proj$wpu.ind <- NA
demand.proj$wpu.ag <- NA
demand.proj$wpu.therm <- NA
demand <- rbind(demand.init, demand.proj)
demand <- dplyr::inner_join(demand, growth, by="fips")
# This is water demand, by sector, by SSR, projected to 2017
# # order data so I can run a loop on lagged values
demand <- demand %>% dplyr::arrange(fips,ssp,year)
# # be sure to sort first!!
demand2 <- demand
for(i in 1:55) {
demand2 <- demand2 %>%
group_by(fips,ssp) %>%
dplyr::mutate(
wpu.dom = ifelse(is.na(wpu.dom), dplyr::lag(wpu.dom) * (1+DP.growth*(1+DP.decay)^(year-2015)),wpu.dom),
wpu.ind = ifelse(is.na(wpu.ind), dplyr::lag(wpu.ind) * (1+IC.growth*(1+IC.decay)^(year-2015)),wpu.ind),
wpu.ag  = ifelse(is.na(wpu.ag),  dplyr::lag(wpu.ag)  * (1+IR.growth*(1+IR.decay)^(year-2015)),wpu.ag))
}
demand2 <- demand2 %>%
ungroup()
# export the above results so we don't have to run them every time
data.table::fwrite(demand2, file="DPwithdrawal_noCC.csv")
rm(demand,demand2)
# assuming the above loop has run, read in demand-temp
demand <- fread(file="DPwithdrawal_noCC.csv") %>% as.data.frame()
demand <- demand %>%
dplyr::mutate(dom.t = pop * wpu.dom,
ind.t = inc * wpu.ind,
ag.t  = acres * wpu.ag
)
names(demand)
demand.noCC <- demand
keeps <- c("fips","state","county","year","ssp","inc","pop","acres","wpu.dom","wpu.ind","wpu.ag","dom.t","ag.t","ind.t")
demand.noCC <- demand.noCC[,names(demand.noCC) %in% keeps]
demand.total <- demand %>%
dplyr::select(year,ssp,dom.t,ind.t,ag.t,therm,la) %>%
dplyr::group_by(year,ssp) %>%
dplyr::summarise_all(sum,na.rm = T) %>%
dplyr::ungroup() %>%
as.data.frame()
demand.total <- demand.total %>%
mutate(total.ag.dom.ind = dom.t + ind.t + ag.t,
total = dom.t + ind.t + ag.t + therm + la)
data.table::fwrite(demand.noCC, file="withdrawal_noCC.csv")
precip.data <- read.xlsx(
xlsxFile="1_ClimateData/CountyPrecip/SummerPrecip/SummerPrecip.xlsx",
sheet = 1,
startRow = 1,
colNames = TRUE,
rowNames = FALSE,
detectDates = FALSE,
skipEmptyRows = TRUE,
skipEmptyCols = TRUE,
rows = NULL,
cols = NULL,
check.names = FALSE,
sep.names = ".",
namedRegion = NULL,
na.strings = "NA",
fillMergedCells = FALSE
)
View(precip.data)
colnames(precip.data)[colnames(precip.data) == "FIPS"] <- "fips"
colnames(precip.data)[colnames(precip.data) == "Year"] <- "year"
demand <- merge(demand.noCC, precip.data, by=c('fips','year'))
pet.data <- read.xlsx(
xlsxFile="1_ClimateData/CountyPET/SummerPET.xlsx",
sheet = 1,
startRow = 1,
colNames = TRUE,
rowNames = FALSE,
detectDates = FALSE,
skipEmptyRows = TRUE,
skipEmptyCols = TRUE,
rows = NULL,
cols = NULL,
check.names = FALSE,
sep.names = ".",
namedRegion = NULL,
na.strings = "NA",
fillMergedCells = FALSE
)
View(demand)
View(pet.data)
View(precip.data)
View(demand)
delta.cc <- merge(demand, pet.data, by=c('fips', 'year'))
View(delta.cc)
demand <- merge(demand, pet.data, by=c('fips', 'year'))
View(demand)
rm(delta.cc)
# the following coefficients are taken from Tom Brown's work for the 2010 RPA Assessment
# the coefficients give the change in gallons per capita per day for a 1cm change in precip
# and ET
cc.dp1 <- -1.415    # coefficient on change in summertime precip
cc.dp2 <- 0.778     # coefficient on change in pet
# convert precip data in mm height to cm height (per equation 11)
demand$spChange.cnrmc45.cm   <- demand$spChange_cnrmc45 * 0.1
demand$spChange.cnrmc85.cm   <- demand$spChange_cnrmc85 * 0.1
demand$spChange.had45.cm  <- demand$spChange_had45 * 0.1
demand$spChange.had85.cm  <- demand$spChange_had85 * 0.1
demand$spChange.mri45.cm <- demand$spChange_mri45 * 0.1
demand$spChange.mri85.cm <- demand$spChange_mri85 * 0.1
demand$spChange.ipsl45.cm <- demand$spChange_ipsl45 * 0.1
demand$spChange.ipsl85.cm <- demand$spChange_ipsl85 * 0.1
demand$spChange.nor45.cm  <- demand$spChange_nor45 * 0.1
demand$spChange.nor85.cm  <- demand$spChange_nor85 * 0.1
# convert PET data in mm height to cm height (per equation 11)
demand$pet_delta_cnrm45.cm   <- demand$pet_delta_cnrm45 * 0.1
demand$pet_delta_cnrm85.cm   <- demand$pet_delta_cnrm85 * 0.1
demand$pet_delta_had45.cm  <- demand$pet_delta_had45 * 0.1
demand$pet_delta_had85.cm  <- demand$pet_delta_had85 * 0.1
demand$pet_delta_mri45.cm <- demand$pet_delta_mri45 * 0.1
demand$pet_delta_mri45.cm <- demand$pet_delta_mri85 * 0.1
demand$pet_delta_ipsl45.cm <- demand$pet_delta_ipsl45 * 0.1
demand$pet_delta_ipsl85.cm <- demand$pet_delta_ipsl85 * 0.1
demand$pet_delta_nor45.cm  <- demand$pet_delta_nor45 * 0.1
demand$pet_delta_nor45.cm  <- demand$pet_delta_nor85 * 0.1
demand$deltaCC.n.cnrm45.cm   <- (cc.dp1*demand$spChange.cnrmc45.cm + cc.dp2*demand$pet_delta_cnrm45.cm)
demand$deltaCC.n.cnrm85.cm   <- (cc.dp1*demand$spChange.cnrmc85.cm + cc.dp2*demand$pet_delta_cnrm85.cm)
demand$deltaCC.n.nor45.cm  <- (cc.dp1*demand$spChange.nor45.cm + cc.dp2*demand$pet_delta_nor45.cm)
demand$deltaCC.n.nor85.cm  <- (cc.dp1*demand$spChange.nor85.cm + cc.dp2*demand$pet_delta_nor85.cm)
demand$pet_delta_nor85.cm  <- demand$pet_delta_nor85 * 0.1
rm(list = ls())  # clears memory
# Set working directory to file location
# for Leslie:
setwd("/Users/leslie/Dropbox/RPA-Water")
library(tidyr)
library(tibble)
library(ggplot2)
library(reshape2)
library(dplyr)  # Has the pipe operator %>%.
library(data.table)
library(openxlsx)
# Notes for faster functions
'
1) "data.table::fread" is faster than "read.csv" but I use "%>% as.data.frame" at the end
fread doesnot change the column names even if they are not allowed,
so I will limit its use here not to distribe the original code
2) "data.table::fwrite" is faster than "write.csv" and by default donot include the row names
3) "dplyr::inner_join" is quivalent but faster than "merge" , other options are full_join and left_join
4) "dplyr::arrange" is faster than attaching and using the order function
5) I replaced the for loop with a different login that run in 3 min now instsead of 2 hr
'
pop.inc <- data.table::fread("1_BaseData/popinc_proj.csv") %>% as.data.frame()
# projections of irrigated acreage for ag
acre.data <- data.table::fread('1_BaseData/acredata-use.csv', header=TRUE) %>% as.data.frame()
# acre.data does not vary by SSP, so collapse to shorten merges
acre.data <- subset(acre.data, ssp == "ssp1")
acre.data <- acre.data %>%
select(fips, year, acres)
# combine projection data
proj.data <- dplyr::inner_join(pop.inc, acre.data, by=c("fips", "year"))
## This is population, income, and acreage projected through 2070:
proj.data <- proj.data %>%
select(fips, year, pop, ssp, inc, acres)
## This is baseline (i.e., 2015) water demand, by sector:
wd.2015 <- read.csv("1_BaseData/USGS2015.csv")
wd.2015 <- wd.2015 %>%
select(FIPS,
'DO.WDelv',
'IN.WFrTo',
'IR.WFrTo',
'IR.CUsFr',
'IR.IrTot',
'LI.WFrTo',
'AQ.WFrTo',
'MI.WFrTo',
'PT.WFrTo',
'PT.PSDel',
'PT.CUsFr',
'PT.Power')
# Create baseline withdrawals for surface water fresh for each sector
# - first calculate total withdrawals for public supply, then calculate percent
#   of those withdrawals from surface water. Some values read in as character
#   so need to convert to numeric
wd.2015[] <- lapply(wd.2015, as.numeric)
#   convert NAs to zeros
wd.2015[is.na(wd.2015)] <- 0
# Creating variables for total sector withdrawals + deliveries (Mgal/day)
wd.2015$dom   <- wd.2015$DO.WDelv
wd.2015$ind   <- wd.2015$IN.WFrTo + wd.2015$MI.WFrTo
wd.2015$ag    <- wd.2015$IR.WFrTo
wd.2015$therm <- wd.2015$PT.WFrTo + wd.2015$PT.PSDel
wd.2015$la    <- wd.2015$LI.WFrTo + wd.2015$AQ.WFrTo
wd.2015$total <- wd.2015$dom + wd.2015$ind + wd.2015$therm +
wd.2015$ag + wd.2015$la
all.wd.2015 <- sum(wd.2015$total)
print(paste0('2015 total withdrawal is ',all.wd.2015,' MGD'))
# baseline demand driver data from USGS
wd.2015$acres <- wd.2015$IR.IrTot
wd.2015$power <- wd.2015$PT.Power
# rename fips to lowercase to match other data files
wd.2015 <- rename(wd.2015, fips = FIPS)
growth <- read.csv("1_BaseData/WDGrowthCU.csv")
pop.inc.2015 <- subset(pop.inc, year == 2015)
# join population projections with base year withdrawals data
demand.init1 <- merge(pop.inc.2015, wd.2015, by = "fips")
# select variables needed for calculations:
# Note, Pop is from withdrawal data. pop used here is from population projections
keeps <- c("fips","year","ssp","inc","pop","dom","ag","ind","therm","la",
"acres", "power")
demand.init <- demand.init1[,names(demand.init1) %in% keeps]
demand.init$wpu.dom   <- demand.init$dom / demand.init$pop
demand.init$wpu.ind   <- demand.init$ind / demand.init$inc
demand.init$wpu.ag    <- demand.init$ag / demand.init$acres
demand.init$wpu.therm <- demand.init$therm / demand.init$power
# create dataframe for projections
demand.proj <- subset(proj.data, year != 2015)
demand.proj$dom <- NA
demand.proj$ind <- NA
demand.proj$therm <- NA
demand.proj$ag <- NA
demand.proj$la <- NA
demand.proj$power <- NA
demand.proj$wpu.dom <- NA
demand.proj$wpu.ind <- NA
demand.proj$wpu.ag <- NA
demand.proj$wpu.therm <- NA
demand <- rbind(demand.init, demand.proj)
demand <- dplyr::inner_join(demand, growth, by="fips")
# This is water demand, by sector, by SSR, projected to 2017
# # order data so I can run a loop on lagged values
demand <- demand %>% dplyr::arrange(fips,ssp,year)
# # be sure to sort first!!
demand2 <- demand
for(i in 1:55) {
demand2 <- demand2 %>%
group_by(fips,ssp) %>%
dplyr::mutate(
wpu.dom = ifelse(is.na(wpu.dom), dplyr::lag(wpu.dom) * (1+DP.growth*(1+DP.decay)^(year-2015)),wpu.dom),
wpu.ind = ifelse(is.na(wpu.ind), dplyr::lag(wpu.ind) * (1+IC.growth*(1+IC.decay)^(year-2015)),wpu.ind),
wpu.ag  = ifelse(is.na(wpu.ag),  dplyr::lag(wpu.ag)  * (1+IR.growth*(1+IR.decay)^(year-2015)),wpu.ag))
}
demand2 <- demand2 %>%
ungroup()
# export the above results so we don't have to run them every time
data.table::fwrite(demand2, file="DPwithdrawal_noCC.csv")
rm(demand,demand2)
# assuming the above loop has run, read in demand-temp
demand <- fread(file="DPwithdrawal_noCC.csv") %>% as.data.frame()
demand <- demand %>%
dplyr::mutate(dom.t = pop * wpu.dom,
ind.t = inc * wpu.ind,
ag.t  = acres * wpu.ag
)
names(demand)
demand.noCC <- demand
keeps <- c("fips","state","county","year","ssp","inc","pop","acres","wpu.dom","wpu.ind","wpu.ag","dom.t","ag.t","ind.t")
demand.noCC <- demand.noCC[,names(demand.noCC) %in% keeps]
demand.total <- demand %>%
dplyr::select(year,ssp,dom.t,ind.t,ag.t,therm,la) %>%
dplyr::group_by(year,ssp) %>%
dplyr::summarise_all(sum,na.rm = T) %>%
dplyr::ungroup() %>%
as.data.frame()
demand.total <- demand.total %>%
mutate(total.ag.dom.ind = dom.t + ind.t + ag.t,
total = dom.t + ind.t + ag.t + therm + la)
data.table::fwrite(demand.noCC, file="withdrawal_noCC.csv")
precip.data <- read.xlsx(
xlsxFile="1_ClimateData/CountyPrecip/SummerPrecip/SummerPrecip.xlsx",
sheet = 1,
startRow = 1,
colNames = TRUE,
rowNames = FALSE,
detectDates = FALSE,
skipEmptyRows = TRUE,
skipEmptyCols = TRUE,
rows = NULL,
cols = NULL,
check.names = FALSE,
sep.names = ".",
namedRegion = NULL,
na.strings = "NA",
fillMergedCells = FALSE
)
View(precip.data)
demand <- merge(demand.noCC, precip.data, by=c('fips','year'))
View(demand)
pet.data <- read.xlsx(
xlsxFile="1_ClimateData/CountyPET/SummerPET.xlsx",
sheet = 1,
startRow = 1,
colNames = TRUE,
rowNames = FALSE,
detectDates = FALSE,
skipEmptyRows = TRUE,
skipEmptyCols = TRUE,
rows = NULL,
cols = NULL,
check.names = FALSE,
sep.names = ".",
namedRegion = NULL,
na.strings = "NA",
fillMergedCells = FALSE
)
demand <- merge(demand, pet.data, by=c('fips', 'year'))
# the following coefficients are taken from Tom Brown's work for the 2010 RPA Assessment
# the coefficients give the change in gallons per capita per day for a 1cm change in precip
# and ET
cc.dp1 <- -1.415    # coefficient on change in summertime precip
cc.dp2 <- 0.778     # coefficient on change in pet
# convert precip data in mm height to cm height (per equation 11)
demand$spChange.cnrmc45.cm   <- demand$spChange_cnrmc45 * 0.1
demand$spChange.cnrmc85.cm   <- demand$spChange_cnrmc85 * 0.1
demand$spChange.had45.cm  <- demand$spChange_had45 * 0.1
demand$spChange.had85.cm  <- demand$spChange_had85 * 0.1
demand$spChange.mri45.cm <- demand$spChange_mri45 * 0.1
demand$spChange.mri85.cm <- demand$spChange_mri85 * 0.1
demand$spChange.ipsl45.cm <- demand$spChange_ipsl45 * 0.1
demand$spChange.ipsl85.cm <- demand$spChange_ipsl85 * 0.1
demand$spChange.nor45.cm  <- demand$spChange_nor45 * 0.1
demand$spChange.nor85.cm  <- demand$spChange_nor85 * 0.1
# convert PET data in mm height to cm height (per equation 11)
demand$pet_delta_cnrm45.cm   <- demand$pet_delta_cnrm45 * 0.1
demand$pet_delta_cnrm85.cm   <- demand$pet_delta_cnrm85 * 0.1
demand$pet_delta_had45.cm  <- demand$pet_delta_had45 * 0.1
demand$pet_delta_had85.cm  <- demand$pet_delta_had85 * 0.1
demand$pet_delta_mri45.cm <- demand$pet_delta_mri45 * 0.1
demand$pet_delta_mri85.cm <- demand$pet_delta_mri85 * 0.1
demand$pet_delta_ipsl45.cm <- demand$pet_delta_ipsl45 * 0.1
demand$pet_delta_ipsl85.cm <- demand$pet_delta_ipsl85 * 0.1
demand$pet_delta_nor45.cm  <- demand$pet_delta_nor45 * 0.1
demand$pet_delta_nor85.cm  <- demand$pet_delta_nor85 * 0.1
demand$deltaCC.n.cnrm45.cm   <- (cc.dp1*demand$spChange.cnrmc45.cm + cc.dp2*demand$pet_delta_cnrm45.cm)
demand$deltaCC.n.cnrm85.cm   <- (cc.dp1*demand$spChange.cnrmc85.cm + cc.dp2*demand$pet_delta_cnrm85.cm)
demand$deltaCC.n.nor45.cm  <- (cc.dp1*demand$spChange.nor45.cm + cc.dp2*demand$pet_delta_nor45.cm)
demand$deltaCC.n.nor85.cm  <- (cc.dp1*demand$spChange.nor85.cm + cc.dp2*demand$pet_delta_nor85.cm)
demand$deltaCC.n.mri45.cm <- (cc.dp1*demand$spChange.mri45.cm + cc.dp2*demand$pet_delta_mri45.cm)
demand$deltaCC.n.mri85.cm <- (cc.dp1*demand$spChange.mri85.cm + cc.dp2*demand$pet_delta_mri85.cm)
demand$deltaCC.n.ipsl45.cm <- (cc.dp1*demand$spChange.ipsl45.cm + cc.dp2*demand$pet_delta_ipsl45.cm)
demand$deltaCC.n.ipsl85.cm <- (cc.dp1*demand$spChange.ipsl85.cm + cc.dp2*demand$pet_delta_ipsl85.cm)
demand$deltaCC.n.had45.cm  <- (cc.dp1*demand$spChange.had45.cm + cc.dp2*demand$pet_delta_had45.cm)
demand$deltaCC.n.had85.cm  <- (cc.dp1*demand$spChange.had85.cm + cc.dp2*demand$pet_delta_had85.cm)
# Steps to convert ∆Φcc = ∆precip + ∆PET, which is in cm to volume at the county level
## First, convert cm to meters
demand$deltaCC.n.cnrm45.m    <- demand$deltaCC.n.cnrmc45.cm/100
# Steps to convert ∆Φcc = ∆precip + ∆PET, which is in cm to volume at the county level
## First, convert cm to meters
demand$deltaCC.n.cnrm45.m    <- demand$deltaCC.n.cnrm45.cm/100
demand$deltaCC.n.cnrm85.m    <- demand$deltaCC.n.cnrm85.cm/100
demand$deltaCC.n.nor45.m   <- demand$deltaCC.n.nor45.cm/100
demand$deltaCC.n.nor85.m   <- demand$deltaCC.n.nor85.cm/100
demand$deltaCC.n.mri45.m  <- demand$deltaCC.n.mri45.cm/100
demand$deltaCC.n.mri85.m  <- demand$deltaCC.n.mri85.cm/100
demand$deltaCC.n.ipsl45.m  <- demand$deltaCC.n.ipsl45.cm/100
demand$deltaCC.n.ipsl85.m  <- demand$deltaCC.n.ipsl85.cm/100
demand$deltaCC.n.had45.m   <- demand$deltaCC.n.had45.cm/100
demand$deltaCC.n.had85.m   <- demand$deltaCC.n.had85.cm/100
# Next, multiply ∆ meters by county area (m2) to get annual volume of ∆Φcc
demand$deltaCC.n.cnrm45.m3   <- demand$deltaCC.n.cnrm45.m*demand$aland
demand$deltaCC.n.cnrm85.m3   <- demand$deltaCC.n.cnrm85.m*demand$aland
demand$deltaCC.n.nor45.m3  <- demand$deltaCC.n.nor45.m*demand$aland
demand$deltaCC.n.nor85.m3  <- demand$deltaCC.n.nor85.m*demand$aland
demand$deltaCC.n.mri45.m3 <- demand$deltaCC.n.mri45.m*demand$aland
demand$deltaCC.n.mri85.m3 <- demand$deltaCC.n.mri85.m*demand$aland
# Next, multiply ∆ meters by county area (m2) to get annual volume of ∆Φcc
demand$deltaCC.n.cnrm45.m3   <- demand$deltaCC.n.cnrm45.m*demand$aland
View(demand)
View(demand)
cnty.area <- read.xls(
xlsFile="1_BaseData/CountyArea.xls",
sheet = 1,
startRow = 1,
colNames = TRUE,
rowNames = FALSE,
detectDates = FALSE,
skipEmptyRows = TRUE,
skipEmptyCols = TRUE,
rows = NULL,
cols = NULL,
check.names = FALSE,
sep.names = ".",
namedRegion = NULL,
na.strings = "NA",
fillMergedCells = FALSE
)
cnty.area <- read.xlsx(
xlsxFile="1_BaseData/CountyArea.xlsx",
sheet = 1,
startRow = 1,
colNames = TRUE,
rowNames = FALSE,
detectDates = FALSE,
skipEmptyRows = TRUE,
skipEmptyCols = TRUE,
rows = NULL,
cols = NULL,
check.names = FALSE,
sep.names = ".",
namedRegion = NULL,
na.strings = "NA",
fillMergedCells = FALSE
)
rm(list = ls())  # clears memory
wd.1985 <- read_excel("1_BaseData/USGS raw water use/us85co.xls")
